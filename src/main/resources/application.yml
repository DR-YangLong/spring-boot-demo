# 端口
server:
      session:
        timeout: "7200"
        cookie:
          max-age: "10080"
      use-forward-headers: "true"
      connection-timeout: "-1"
#logger 配置
logging:
    config: "classpath:logback-spring.xml"
spring:
  profiles:
    active: dev
  datasource:
        name: "datasource"
        # druid数据源
        type: "com.alibaba.druid.pool.DruidDataSource"
        driver-class-name: "com.mysql.jdbc.Driver"
        filters: "stat,config"
        maxActive: "20"
        initialSize: "1"
        maxWait: "60000"
        minIdle: "1"
        timeBetweenEvictionRunsMillis: "60000"
        minEvictableIdleTimeMillis: "300000"
        validationQuery: "select 'x'"
        testWhileIdle: "true"
        testOnBorrow: "false"
        testOnReturn: "false"
        poolPreparedStatements: "true"
        maxOpenPreparedStatements: "20"
  #redis配置，修改为自己环境
  redis:
        host: "127.0.0.1"
        port: "6379"
        password:
        database: "1"
        pool:
          max-active: "8"
          max-idle: "8"
          max-wait: "-1"
          min-idle: "0"
#druid监控
druid:
  stat:
        userName: yanglong
        password: yanglong
        resetEnable: true
        allow: ""
        deny: ""
#mybatis-plus
mybatis-plus:
  #映射文件
  mapper-locations: classpath:/mapper/*Mapper.xml
  #实体类包，数组
  typeAliasesPackage: site.yanglong.promotion.model
  global-config:
    #id类型，com.baomidou.mybatisplus.enums.IdType.java
    id-type: 0
    #字段验证，com.baomidou.mybatisplus.enums.FieldStrategy
    field-strategy: 1
    #表字段是否以下划线分割
    db-column-underline: false
    #是否刷新mapper
    refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    #序列接口实现类配置
    #key-generator: com.baomidou.springboot.xxx
    #逻辑删除配置，搭配逻辑删除sql-injector
    logic-delete-value: "1"
    logic-not-delete-value: "0"
    #自定义填充策略接口实现
    meta-object-handler: site.yanglong.promotion.config.UserFillHandler  #自定义SQL注入器
    sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
  configuration:
    #如果数据库表**字段**本身采用下划线且POJO中为驼峰，此属性设为true。
    map-underscore-to-camel-case: false
    #是否开启mapper二级缓存
    cache-enabled: false
#可以直接使用，不用配置都有默认值，此处示例
autoload:
  cache:
    config:
      #命名空间，在多个模块共用一个缓存环境时，避免key冲突；
      namespace: demo
      #处理自动加载队列的线程数量,默认值为10；
      threadCnt: 10
      #自动加载队列中允许存放的最大容量，默认值为20000；
      maxElement: 20000
      #是否打印比较耗时的请求，默认值：true；
      printSlowLog: true
      #当请求耗时超过此值时，记录目录（printSlowLog=true 时才有效），单位：毫秒；默认值500；
      slowLoadTime: 500
      #自动加载队列排序算法,
      #0：按在Map中存储的顺序（即无序）；
      #1：越接近过期时间，越耗时的排在最前；
      #2：根据请求次数，倒序排序，请求次数越多，说明使用频率越高，造成并发的可能越大。
      #更详细的说明，请查看代码com.jarvis.cache.type.AutoLoadQueueSortType
      sortType: 1
      #加载数据之前去缓存服务器中检查，数据是否快过期，
      #如果应用程序部署的服务器数量比较少，设置为false,
      #如果部署的服务器比较多，可以考虑设置为true；
      checkFromCacheBeforeLoad: false
      #单个线程中执行自动加载的时间间隔, 此值越小，遍历自动加载队列频率越高，越消耗CPU；
      autoLoadPeriod: 80
      #注册表达式中用到的自定义函数；map结构
      #functions:
      #异步刷新缓存线程池的 corePoolSize，默认值：2
      refreshThreadPoolSize: 3
      #异步刷新缓存线程池的 maximumPoolSize ，默认值：20；
      refreshThreadPoolMaxSize: 30
      #异步刷新缓存线程池的 keepAliveTime。默认值20，单位分钟；
      refreshThreadPoolkeepAliveTime: 20
      #异步刷新缓存队列容量，默认值：2000；
      refreshQueueCapacity: 2000
      #加载数据重试次数，默认值为1（即不尝试）
      loadDataTryCnt: 1
    enable: true
    namespace-enable: true
